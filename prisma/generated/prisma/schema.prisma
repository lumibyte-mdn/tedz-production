// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  role          String?   @default("user") @map("role")
  banned        Boolean   @default(false)
  banReason     String?   @map("ban_reason")
  banExpires    DateTime? @map("ban_expires")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime @map("expires_at")
  token          String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")
  impersonatedBy String?  @map("impersonated_by")
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@map("verification")
}

model Brand {
  id   Int     @id @default(autoincrement())
  name String
  logo String?

  @@map("brands")
}

enum CategoryLayout {
  GRID
  CARD
  PORTRAIT
}

model Category {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  layout    CategoryLayout @default(CARD) @map("layout")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  projects Project[]

  @@map("categories")
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  subTitle    String?  @map("sub_title")
  image       String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  projectImages ProjectImage[]
  projectVideos ProjectVideo[]

  @@map("projects")
}

model ProjectImage {
  id        Int     @id @default(autoincrement())
  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  image     String

  @@map("project_images")
}

model ProjectVideo {
  id        Int     @id @default(autoincrement())
  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  video     String

  @@map("project_videos")
}
